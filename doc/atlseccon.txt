ROPER is a genetic ROP-chain compiler that I have designed and
developed. It compiles ROP-chains, by creating a miniature
ecosystem in which ROP-chains evolve. In my talk, I will
introduce the tool, explain how Return-Oriented Programing (ROP)
works, and how genetic programming can be used in return-oriented
exploit development. I will give a live demo, showing how ROPER
can be used to develop payloads -- including payloads that
exhibit learned or evolved behaviour -- unlikely to be developed
by humans.

Definitions:

1. Return-Oriented Programming is an exploit technique that,
instead of writing malicious code ("shellcode") into a process'
executable memory, collages together a series of "gadgets" that
already subside in executable memory. This is useful when the
process has no memory segments that are flagged as both
executable and writeable (W^X/DEP). 

2. Genetic programming is the implementation of natural selection
in code.  A population of random programmes (in this case,
ROP-chains) is generated. A fitness function is then defined, and
used to rank the results of their execution. Fitter programmes
are made more likely to breed. Mutation operators are applied to
the offspring, and the next generation of the process begins.
This carries on until the desired outcome is obtained. 
